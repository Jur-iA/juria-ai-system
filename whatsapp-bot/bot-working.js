const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');

console.log('üöÄ JurIA Bot - Vers√£o Definitiva');
console.log('‚ö° Iniciando...');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
        timeout: 60000
    }
});

client.on('qr', (qr) => {
    console.log('\nüì± ESCANEIE O QR CODE ABAIXO:');
    console.log('=' * 50);
    qrcode.generate(qr, { small: true });
    console.log('=' * 50);
    console.log('üí° WhatsApp > Menu > Dispositivos conectados > Conectar dispositivo\n');
});

client.on('authenticated', () => {
    console.log('üîê AUTENTICADO COM SUCESSO!');
});

client.on('ready', () => {
    console.log('‚úÖ JURIA BOT CONECTADO E FUNCIONANDO!');
    console.log('ü§ñ Pronto para receber mensagens!');
    console.log('üì± Teste enviando qualquer mensagem no WhatsApp\n');
});

client.on('message', async (message) => {
    // N√£o responder mensagens pr√≥prias
    if (message.fromMe) return;
    
    try {
        const contact = await message.getContact();
        const contactName = contact.name || contact.pushname || 'Usu√°rio';
        
        console.log('\n' + '='.repeat(60));
        console.log(`üì® NOVA MENSAGEM RECEBIDA!`);
        console.log(`üë§ De: ${contactName}`);
        console.log(`üìû N√∫mero: ${message.from}`);
        console.log(`üí¨ Mensagem: "${message.body}"`);
        console.log(`üïê Hora: ${new Date().toLocaleTimeString()}`);
        
        // Resposta do bot
        const botResponse = `ü§ñ *JurIA - Assistente Jur√≠dico*

Ol√° ${contactName}! Obrigado por entrar em contato!

üéØ *Nossos Planos:*

üìã *PLANO SOLO* - R$ 197/m√™s
‚Ä¢ Ideal para advogados aut√¥nomos
‚Ä¢ IA jur√≠dica completa
‚Ä¢ An√°lise de documentos
‚Ä¢ Consulta de jurisprud√™ncia
‚Ä¢ Gera√ß√£o de pe√ßas

üè¢ *PLANO ESCRIT√ìRIO* - R$ 147/usu√°rio/m√™s
‚Ä¢ Para escrit√≥rios e equipes
‚Ä¢ Todos os recursos do Solo
‚Ä¢ Gest√£o de casos colaborativa
‚Ä¢ Relat√≥rios avan√ßados
‚Ä¢ Controle de usu√°rios

üí∞ *Para assinar:*
‚Ä¢ PIX: 04449816161
‚Ä¢ Nome: Reginaldo Dias Junior
‚Ä¢ Ap√≥s pagamento: token de cadastro autom√°tico

üöÄ Qual plano desperta seu interesse?

_Responda com "SOLO" ou "ESCRITORIO" para mais detalhes!_`;

        // Enviar resposta
        await client.sendMessage(message.from, botResponse);
        
        console.log(`‚úÖ RESPOSTA ENVIADA PARA: ${contactName}`);
        console.log('='.repeat(60) + '\n');
        
    } catch (error) {
        console.error('‚ùå ERRO ao processar mensagem:', error.message);
    }
});

client.on('disconnected', (reason) => {
    console.log('‚ö†Ô∏è Bot desconectado:', reason);
    console.log('üîÑ Reiniciando em 5 segundos...');
    setTimeout(() => {
        client.initialize();
    }, 5000);
});

client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
    console.log('üîÑ Tente escanear o QR Code novamente');
});

// Inicializar cliente
console.log('üîÑ Inicializando cliente WhatsApp...');
client.initialize();

// Tratamento de erros globais
process.on('unhandledRejection', (err) => {
    console.error('‚ùå Erro n√£o tratado:', err.message);
});

process.on('uncaughtException', (err) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', err.message);
});

console.log('‚ö° Bot configurado! Aguardando QR Code...');
